#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

include Hooky::Mongodb

# Setup
config = converge( CONFIG_DEFAULTS, payload[:config] || {} )

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ed25519_key' }
  end

end

# make sure the env dir exists
directory "/data/etc/env.d" do
  recursive true
end

# and that it's owned by gomicro
execute "chown gomicro /data/etc/env.d"

(payload[:env] || {}).each do |key, value|
  file "/data/etc/env.d/#{key}" do
    content value
    owner 'gomicro'
    group 'gomicro'
    mode 0444
  end
end

if payload[:logvac_host]
  # Configure narc
  template '/opt/gomicro/etc/narc.conf' do
    variables ({ uid: payload[:component][:uid], logvac: payload[:logvac_host] })
  end
  # ensure log files are created
  ["/var/log/gomicro/db/current", "/data/var/log/mongodb/mongodb.log"].each do |log_file|
    if not ::File.exists? "#{log_file}"
      parent = File.expand_path("..", "#{log_file}")

      # create the parent directory
      directory parent do
        owner 'gomicro'
        group 'gomicro'
        recursive true
      end

      # create the log_file
      file "#{log_file}" do
        owner 'gomicro'
        group 'gomicro'
        mode  0644
      end
    end
  end

  directory '/etc/service/narc'

  file '/etc/service/narc/run' do
    mode 0755
    content <<-EOF
#!/bin/sh -e
export PATH="/opt/local/sbin:/opt/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/gomicro/sbin:/opt/gomicro/bin"

exec /opt/gomicro/bin/narcd /opt/gomicro/etc/narc.conf
    EOF
  end
end

if ['default', 'primary', 'secondary'].include? payload[:member][:role]

  directory '/data/var/db/mongodb' do
    recursive true
  end

  # chown data/var/db/mongodb for gomicro
  execute 'chown /data/var/db/mongodb' do
    command 'chown -R gomicro:gomicro /data/var/db/mongodb'
  end

  directory '/data/var/log/mongodb' do
    recursive true
  end

  # create log file
  file '/data/var/log/mongodb/mongodb.log' do
    owner 'gomicro'
    group 'gomicro'
  end

  directory '/data/var/run' do
    owner 'gomicro'
    group 'gomicro'
  end

  directory '/data/etc/mongodb' do
    owner 'gomicro'
    group 'gomicro'
  end

  # set mongodb config
  template '/data/etc/mongodb/mongod.conf' do
    source 'mongodb.conf.erb'
    mode 0600
    owner 'gomicro'
    group 'gomicro'
    variables ({ config: config, user: "microbox" })
  end
end

# Install extra packages

# Add extra paths
if payload[:extra_path_dirs] && payload[:extra_path_dirs].length > 0
  directory "/data/etc/env.d" do
    recursive true
    owner 'gomicro'
    group 'gomicro'
  end

  file "/data/etc/env.d/EXTRA_PATHS" do
    content payload[:extra_path_dirs].join(":")
    owner 'gomicro'
    group 'gomicro'
    mode 0444
  end
end

if payload[:extra_packages]
  execute "Install packages" do
    command "/data/bin/pkgin -y in #{payload[:extra_packages].join(' ')}"
    path "/data/sbin:/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    user 'gomicro'
  end
end

if payload[:extra_steps]
  payload[:extra_steps].each_with_index do |cmd, i|

    execute "Extra Step: #{cmd}" do
      command "bash -i -l -c \"#{escape cmd}\""
      cwd "/data"
      path "/data/sbin:/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      user 'gomicro'
    end
  end
end

# Set up cron
if payload[:member][:uid] == 1 && ! payload[:cron_jobs].nil?
  include Hookit::Helper::Cron
  include Hookit::Helper::Shell

  directory '/opt/microbox/cron/'

  payload[:cron_jobs].each_with_index do |job, id|
    template "/opt/microbox/cron/#{job[:id]}" do
      owner 'gomicro'
      source 'cron.erb'
      group 'gomicro'
      mode 0755
      variables ({
        component_uid: payload[:component][:uid],
        member_uid: payload[:member][:uid],
        logvac_host: payload[:logvac_host],
        command: escape_shell_string(job[:command]),
        cron_id: id + 1
      })
    end
  end

  template '/etc/crontab' do
    mode 0644
    variables ({ crons: payload[:cron_jobs] })
  end

end
